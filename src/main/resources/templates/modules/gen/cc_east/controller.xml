<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>controller</name>
	<filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}Controller.java</fileName>
	<content><![CDATA[
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

<#assign y = 0>
<#list table.columnList as c>
	<#if c.isPk == "1" && c.simpleJavaType = "BigDecimal" && y == 0>
import java.math.BigDecimal;
	<#assign y = 1>
	</#if>
</#list>
import java.net.URLDecoder;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Lists;
import com.tansun.easycare.core.beanvalidator.BeanValidators;
import com.tansun.easycare.core.config.Global;
import com.tansun.easycare.core.excel.ExportExcel;
import com.tansun.easycare.core.excel.ImportExcel;
import com.tansun.easycare.core.mapper.JsonMapper;
import com.tansun.easycare.core.persistence.Page;
import com.tansun.easycare.core.utils.CookieUtils;
import com.tansun.easycare.core.utils.DateUtils;
import com.tansun.easycare.core.web.BaseController;
import com.tansun.easycare.modules.sys.service.OfficeService;
import com.tansun.easycare.modules.sys.utils.UserUtils;
import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;
import com.tansun.easycare.reg.base.common.RegSysCommon;
import com.tansun.easycare.reg.util.RegStringUtil;

/**
 * ${functionName}Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${adminPath}"}/${urlPrefix}")
public class ${ClassName}Controller extends BaseController {

	@Autowired
	private ${ClassName}Service ${className}Service;
	
	@Autowired
	private OfficeService officeservice;
	
	/** 
	 * 方法说明: 新进入界面时，会优先走这个查询</br>
	 * 
	 * @return
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	@ModelAttribute
	public ${ClassName} get() {
		return new ${ClassName}();
	}
	
	/** 
	 * 方法说明: 在新增和修改之后， 反显查询条件以及通过查询条件查询数据</br>
	 * 
	 * @param pcIImnMsgAsuInf
	 * @param request
	 * @param response
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = "setQueryCondition")
	public void setQueryCondition(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response){
		CookieUtils.setCookie(response, "ck_${className}", JsonMapper.toJsonString(${className}));
	}
	
	/** 
	 * 方法说明: 页面第一次展示时，不需要反显查询条件 入口</br>
	 * 
	 * @param pcIImnMsgAsuInf
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = "")
	public String initList(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		CookieUtils.setCookie(response, "ck_${className}", "");
		String queryOrgId = ${className}.getRegOrgNo();
		if(RegStringUtil.isEmpty(queryOrgId)){
			queryOrgId = UserUtils.getUser().getCompany().getId();
		}
		// 业务所属机构
		String code = officeservice.findcode(queryOrgId);
		${className}.setRegOrgNo(code);
		Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(request, response), ${className}); 
		// 用于反显查询栏
		${className}.setRegOrgNo(queryOrgId);
		model.addAttribute("page", page);
		return "${lastPackageName}/${viewPrefix}List";
	}
	
	/** 
	 * 方法说明: 新增和修改之后，需要反显查询条件 入口</br>
	 * 
	 * @param pcIImnMsgAsuInf
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = "list")
	public String list(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {
		String reqString = CookieUtils.getCookie(request, "ck_${className}");
		if (!RegStringUtil.isEmpty(reqString)) {
			${className} = (${ClassName}) JsonMapper.fromJsonString(reqString, ${ClassName}.class);
		}
		String queryOrgId = ${className}.getRegOrgNo();
		if(RegStringUtil.isEmpty(queryOrgId)){
			queryOrgId = UserUtils.getUser().getCompany().getId();
		}
		// 业务所属机构
		String code = officeservice.findcode(queryOrgId);
		${className}.setRegOrgNo(code);
		Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(request, response), ${className}); 
		// 用于反显查询栏
		${className}.setRegOrgNo(queryOrgId);
		model.addAttribute("${className}", ${className});
		model.addAttribute("page", page);
		return "${lastPackageName}/${viewPrefix}List";
	}

	/** 
	 * 方法说明: 新增界面请求跳转</br>
	 * 
	 * @param pcIImnMsgAsuInf
	 * @param request
	 * @param model
	 * @return
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = "formAdd")
	public String formAdd(${ClassName} ${className}, Model model) {
		model.addAttribute("${className}", new ${ClassName}());
		return "${lastPackageName}/${viewPrefix}FormAdd";
	}

	/** 
	 * 方法说明: 修改界面请求跳转</br>
	 * 
	 * @param pcIImnMsgAsuInf
	 * @param request
	 * @param model
	 * @return
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = "formEdit")
	public String formEdit(${ClassName} ${className}, HttpServletRequest request, Model model) {
		try {
			set${ClassName}Key(${className}, request);
			${ClassName} ${className}Pk = ${className}Service.get${ClassName}ByKey(${className});
			model.addAttribute("${className}", ${className}Pk);
		} catch (Exception e) {
			logger.error("获取数据错误" + e.getMessage());
		}
		return "${lastPackageName}/${viewPrefix}FormEdit";
	}
	
	/** 
	 * 方法说明: 查看界面请求跳转</br>
	 * 
	 * @param pcIImnMsgAsuInf
	 * @param request
	 * @param model
	 * @return
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = "formView")
	public String formView(${ClassName} ${className}, HttpServletRequest request, Model model) {
		try {
			set${ClassName}Key(${className}, request);
			${ClassName} ${className}Pk = ${className}Service.get${ClassName}ByKey(${className});
			model.addAttribute("${className}", ${className}Pk);
		} catch (Exception e) {
			logger.error("获取数据错误" + e.getMessage());
		}
		return "${lastPackageName}/${viewPrefix}FormView";
	}
	
	/** 
	 * 方法说明: 新增界面的保存请求</br>
	 * 
	 * @param pcIImnMsgAsuInf
	 * @param model
	 * @param redirectAttributes
	 * @return
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	@RequiresPermissions("${permissionPrefix}:add")
	@RequestMapping(value = "save")
	public String save(${ClassName} ${className}, Model model, RedirectAttributes redirectAttributes) {
		// 数据验证
		if (!beanValidator(model, ${className})){
			return formAdd(${className}, model);
		}
		${className}Service.save(${className});
		addMessage(redirectAttributes, "保存${functionNameSimple}成功");
		return "redirect:" + Global.getAdminPath() + "/${viewPrefix}/list?repage";
	}
	
	
	/** 
	 * 方法说明: 修改界面的保存请求</br>
	 * 
	 * @param pcIImnMsgAsuInf
	 * @param model
	 * @param redirectAttributes
	 * @return
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	@RequiresPermissions("${permissionPrefix}:modify")
	@RequestMapping(value = "update")
	public String update(${ClassName} ${className}, Model model, RedirectAttributes redirectAttributes) {
		// 数据验证
		if (beanValidator(model, ${className})){
			${className}Service.update(${className});
			addMessage(redirectAttributes, "保存${functionNameSimple}成功");
			return "redirect:" + Global.getAdminPath() + "/${viewPrefix}/list?repage";
		} else {
			addMessage(redirectAttributes, "数据验证不通过！");
			return formEdit(${className}, null, model);
		}
	}
	
	/** 
	 * 方法说明: 删除的请求</br>
	 * 
	 * @param pcIImnMsgAsuInf
	 * @param redirectAttributes
	 * @return
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	@RequiresPermissions("${permissionPrefix}:remove")
	@RequestMapping(value = "delete")
	public String delete(${ClassName} ${className}, HttpServletRequest request, RedirectAttributes redirectAttributes) {
		try {
			set${ClassName}Key(${className}, request);
			${className}Service.delete(${className});
			addMessage(redirectAttributes, "删除${functionNameSimple}成功");
		} catch (Exception e) {
			logger.error("删除${functionNameSimple}错误" + e.getMessage());
		}
		return "redirect:" + Global.getAdminPath() + "/${viewPrefix}/list?repage";
	}
	
	/** 
	 * 方法说明: 提交的请求</br>
	 * 
	 * @param pcIImnMsgAsuInf
	 * @param redirectAttributes
	 * @return
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	@RequiresPermissions("${permissionPrefix}:submit")
	@RequestMapping(value = "submit")
	public String submit${ClassName}(${ClassName} ${className}, HttpServletRequest request, RedirectAttributes redirectAttributes) {
		try {
			set${ClassName}Key(${className}, request);
			${className}Service.submit${ClassName}(${className});
			addMessage(redirectAttributes, "提交${functionNameSimple}成功");
		} catch (Exception e) {
			logger.error("提交${functionNameSimple}错误" + e.getMessage());
		}
		return "redirect:" + Global.getAdminPath() + "/${viewPrefix}/list?repage";
	}
	
	/** 
	 * 方法说明: 通过的请求</br>
	 * 
	 * @param pcIImnMsgAsuInf
	 * @param redirectAttributes
	 * @return
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	@RequiresPermissions("${permissionPrefix}:via")
	@RequestMapping(value = "via")
	public String via${ClassName}(${ClassName} ${className}, HttpServletRequest request, RedirectAttributes redirectAttributes) {
		try {
			set${ClassName}Key(${className}, request);
			${className}Service.via${ClassName}(${className});
			addMessage(redirectAttributes, "通过${functionNameSimple}成功");
		} catch (Exception e) {
			logger.error("通过${functionNameSimple}错误" + e.getMessage());
		}
		return "redirect:" + Global.getAdminPath() + "/${viewPrefix}/list?repage";
	}
	
	
	/** 
	 * 方法说明: 退回的请求</br>
	 * 
	 * @param pcIImnMsgAsuInf
	 * @param redirectAttributes
	 * @return
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	@RequiresPermissions("${permissionPrefix}:return")
	@RequestMapping(value = "return")
	public String return${ClassName}(${ClassName} ${className}, HttpServletRequest request, RedirectAttributes redirectAttributes) {
		try {
			set${ClassName}Key(${className}, request);
			${className}Service.return${ClassName}(${className});
			addMessage(redirectAttributes, "退回${functionNameSimple}成功");
		} catch (Exception e) {
			logger.error("退回${functionNameSimple}错误" + e.getMessage());
		}
		return "redirect:" + Global.getAdminPath() + "/${viewPrefix}/list?repage";
	}
	
	/** 
	 * 方法说明: 设置主键信息</br>
	 * 
	 * @param ${className}
	 * @param request
	 * @throws Exception
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	private void set${ClassName}Key(${ClassName} ${className}, HttpServletRequest request) throws Exception {
		if(request != null){
			request.setCharacterEncoding(RegSysCommon.CODING_UTF8);
			<#list table.columnList as c>
				<#if c.isPk == "1">
			${className}.set${c.javaFieldId?cap_first}(<#if c.simpleJavaType == "BigDecimal">newe BigDecimal(<#elseif c.simpleJavaType == "Long">Long.valueOf(</#if>URLDecoder.decode(request.getParameter("${c.javaFieldId}"), RegSysCommon.CODING_UTF8)<#if c.simpleJavaType == "BigDecimal" || c.simpleJavaType == "Long">)</#if>);
				</#if>
			</#list>
		}
	}
	
	/** 
	 * 方法说明: 导出数据到Excel中</br>
	 * 
	 * @param pcIImnMsgAsuInf
	 * @param request
	 * @param response
	 * @param redirectAttributes
	 * @return
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	@RequiresPermissions("${permissionPrefix}:export")
    @RequestMapping(value = "exportExcel", method = RequestMethod.POST)
    public String exportExcel(${ClassName} ${className}, HttpServletRequest request, HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
            String fileName = "${functionName}" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";
            Page<${ClassName}> page = ${className}Service.findPage(new Page<${ClassName}>(request, response, -1), ${className});
    		new ExportExcel("${functionName}", ${ClassName}.class).setDataList(page.getList()).write(response, fileName).dispose();
			addMessage(redirectAttributes, "导出${functionName}完成！");
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出${functionName}失败！失败信息：" + e.getMessage());
		}
		return null;
    }
	
	 /** 
	 * 方法说明: 从Excel中导入数据到库中</br>
	 * 
	 * @param file
	 * @param redirectAttributes
	 * @return
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	@RequiresPermissions("${permissionPrefix}:import")
    @RequestMapping(value = "importExcel", method = RequestMethod.POST)
    public String importExcel(MultipartFile file, RedirectAttributes redirectAttributes) {
		try {
			int successNum = 0;
			int failureNum = 0;
			StringBuilder failureMsg = new StringBuilder();
			ImportExcel ie = new ImportExcel(file, 1, 0);
			List<${ClassName}> ${className}List = ie.getDataList(${ClassName}.class);
			for (${ClassName} ${className} : ${className}List){
				try {
					BeanValidators.validateWithException(validator, ${className});
					${className}Service.save(${className});
					successNum++;
				} catch (ConstraintViolationException cx) {
					failureMsg.append("<br/>名称 " + getImportKeyMsg(${className}) + " 导入失败：");
					List<String> messageList = BeanValidators.extractPropertyAndMessageAsList(cx, ": ");
					failureNum++;
					for (String message : messageList){
						failureMsg.append(message + "; ");
					}
				} catch (Exception ex) {
					failureMsg.append("<br/>名称 " + getImportKeyMsg(${className}) + " 导入失败：" + ex.getMessage());
				}
			}
			if (failureNum > 0){
				failureMsg.insert(0, "，失败 " + failureNum + " 条${functionName}，导入信息如下：");
			}
			addMessage(redirectAttributes, "已成功导入 " + successNum + " 条数据" + failureMsg);
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入${functionName}数据异常！异常信息：" + e.getMessage());
		}
		return "redirect:" + Global.getAdminPath() + "/${viewPrefix}/list?repage";
    }
	
	/** 
	 * 方法说明: 获取导入数据中主键拼接内容</br>
	 * 
	 * @param ${className}
	 * @return
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	private String getImportKeyMsg(${ClassName} ${className}){
		StringBuilder sb = new StringBuilder();
		<#list table.columnList as c>
			<#if c.isPk == "1">
		sb.append(" ${c.comments}:")
		  .append(${className}.get${c.javaFieldId?cap_first}())
		  .append(";");
			</#if>
		</#list>
		sb.append(" ");
		return sb.toString();
	}
	
	/** 
	 * 方法说明: 下载Excel导入模板</br>
	 * 
	 * @param response
	 * @param redirectAttributes
	 * @return
	 * @author ${functionAuthor}
	 * @version ${functionVersion}
	 */
	@RequiresPermissions("${permissionPrefix}:import")
    @RequestMapping(value = "downExcelTemplate")
    public String downExcelTemplate(HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
            String fileName = "${functionName}导入模板.xlsx";
    		List<${ClassName}> list = Lists.newArrayList();
    		new ExportExcel("${functionName}", ${ClassName}.class, 2).setDataList(list).write(response, fileName).dispose();
			addMessage(redirectAttributes, "${functionName}导入模板下载完成！");
		} catch (Exception e) {
			addMessage(redirectAttributes, "${functionName}导入模板下载失败！失败信息："+e.getMessage());
		}
		return null;
    }

}]]>
	</content>
</template>